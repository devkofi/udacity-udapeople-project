version: 2.1

#=============================#
# COMMANDS TO INCLUED IN JOBS #
#=============================#
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
      workflow_id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy environment << parameters.workflow_id >>
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >>"
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-cloudfront-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-s3-blue-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-s3-green-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            #aws rds delete-db-instance --db-instance-identifier $TYPEORM_INSTANCE_ID --final-db-snapshot-identifier SkipFinalSnapShot-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if not successfully run in the current workflow.
    parameters:
      # Add parameter here   
      workflow_id:
        type: string
        default: "$CIRCLE_WORKFLOW_ID:0:7"       
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            source ~/.profile
            source ~/.bashrc
            SUCCESS=$(curl --insecure https://kvdb.io/4hYKp1FLiCJ3uV2tsNAJQZ/migration_<< parameters.workflow_id >>)
            
            if SUCCESS==1
            then
              cd backend
              npm install
              npm run migrations:revert
            fi 

  create-to-destroy:
    description: Installs aws to destroy-environment on fail
    parameters:
      # Add parameter here   
      workflow_id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy backend and frontend cloudformation stacks given a workflow ID.
          when: on_fail
          command: |
            cd $HOME
            sudo apt install -y curl unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-cloudfront-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-s3-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            #aws rds delete-db-instance --db-instance-identifier $TYPEORM_INSTANCE_ID --final-db-snapshot-identifier SkipFinalSnapShot-<< parameters.workflow_id >>
            
  create-to-revert-migrations:
    description: Revert all database migrations
    steps:
      - run: 
          name: Install NodeJs and NPM
          when: on_fail
          command: |
            cd $HOME
            sudo apt install -y nodejs npm
            node --version
            npm --version

      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd backend
            npm run premigrations:revert
            npm run migrations:revert
      

#=============================#
# SLACK NOTIFICATION SETUP    #
#=============================#
orbs: 
  slack: circleci/slack@4.10.1 
  

#=============================#
# JOBS TO EXECUTE             #
#=============================#            
jobs:

  ###################################################
  # SETUP AWS RDS FOR DATABASE MIGRATIONS           #
  #                                                 #
  #   This will help us set a database on aws for   #
  #   or database migrations for the application    #
  #                                                 #
  ###################################################
  setup-aws-rds:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
        environment:
          PAGER: cat
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Setup RDS for Database Migration
          command: |
            aws rds create-db-instance \
            --db-instance-identifier $TYPEORM_INSTANCE_ID \
            --db-instance-class $TYPEORM_INSTANCE_CLASS \
            --db-name $TYPEORM_DATABASE \
            --engine $TYPEORM_CONNECTION \
            --master-username $TYPEORM_USERNAME \
            --master-user-password $TYPEORM_PASSWORD \
            --allocated-storage $TYPEORM_STORAGE \
            --publicly-accessible

            aws rds create-db-security-group \
            --db-security-group-name $TYPEORM_INSTANCE_ID-${CIRCLE_WORKFLOW_ID:0:7} \
            --db-security-group-description "Creates a security group for the udapeople project"
            
            # aws rds authorize-db-security-group-ingress \
            # --db-security-group-name $TYPEORM_INSTANCE_ID-${CIRCLE_WORKFLOW_ID:0:7} \
            # --cidrip 0.0.0.0/0
      
      - run:
          name: Destroy environment ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
          command: |
            aws rds delete-db-instance --db-instance-identifier $TYPEORM_INSTANCE_ID --final-db-snapshot-identifier SkipFinalSnapShot-${CIRCLE_WORKFLOW_ID:0:7}


  ###################################################
  # SETUP S3 BUCKET FOR HOSTING                     #
  #                                                 #
  #   This will help us set a storage service that  #
  #   that will help us host the content of our     #
  #   application                                   #
  ###################################################
  setup-s3-bucket:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Setup Initial S3 Bucket For Blue Deploy
          command: |
            cd .circleci/files
            aws cloudformation deploy \
            --template-file bucketOld.yml \
            --stack-name "udapeople-s3-blue-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides BlueBucketID="udapeople-kk1j287dhjp437knk"  \
            --tags project=udapeople
      
      - run:
          name: Setup Initial S3 Bucket For Green Deploy
          command: |
            cd .circleci/files
            aws cloudformation deploy \
            --template-file bucketNew.yml \
            --stack-name udapeople-s3-green-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides GreenBucketID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      
  
  ###################################################
  # SETUP CLOUDFRONT DISTRIBUTION                   #                                                 
  #                                                 #
  #   Using the Blue Green Deployment strategy this #
  #   will help us switch from the old infrastruc-  #
  #   ture to the new one                           #
  ###################################################
  setup-aws-cloudfront:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
        environment:
          PAGER: cat
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Disable Output Buffering
          command: |
            export PYTHONUNBUFFERED=1
            python -m unittest
          
      - run:
          name: Setup Cloudfront for deployment
          command: |
            cd .circleci/files
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name udapeople-cloudfront-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides WorkflowID="kk1j287dhjp437knk"
      
      - destroy-environment

           
  ###################################################
  # BUILD FRONT END WITH NOTIFICATIONS              #                                                 
  #                                                 #
  #   This will help us setup our front-end and a   #
  #   notification system using Slack               #
  #                                                 #
  ###################################################
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
      # - image: cimg/node:18.7.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
        
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: pass
          template: success_tagged_deploy_1

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

      - persist_to_workspace:
            root: .
            paths: 
              - frontend/*


  ###################################################
  # BUILD BACK END WITH NOTIFICATIONS               #                                                 
  #                                                 #
  #   This will help us setup our back-end and a    #
  #   notification system using Slack               #
  #                                                 #
  ###################################################
  build-backend:
    docker:
      - image: circleci/node:13.8.0
      # - image: cimg/node:18.7.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build

      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
        
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: pass
          template: success_tagged_deploy_1

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  ###################################################
  # TEST FRONT-END                                  #                                                 
  #                                                 #
  #   This will help us test our front-end          #
  #                                                 #
  #                                                 #
  ###################################################
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
      # - image: cimg/node:18.7.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Test Front-end
          command: |
            cd frontend
            npm run test    


  ###################################################
  # TEST BACK-END                                   #                                                 
  #                                                 #
  #   This will help us test our front-end          #
  #                                                 #
  #                                                 #
  ###################################################
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
      # - image: cimg/node:18.7.0
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [backend-build]

      # Your job code here
      - run:
          name: Test Back-end
          command: |
            cd backend
            npm run test


  ###################################################
  # CHECK FOR FRONT END VULNERABILITIES             #                                                 
  #                                                 #
  #   This will scan our front-end application for  #
  #   any vulnerabilities                           #
  #                                                 #
  ###################################################
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
      # - image: cimg/node:18.7.0
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [frontend-build]

      # Your job code here
      - run:
          name: Check Front-end Vulnerabilities
          command: |
            cd frontend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force


  ###################################################
  # CHECK FOR BACK-END VULNERABILITIES              #                                                 
  #                                                 #
  #   This will scan our back-end application for   #
  #   any vulnerabilities                           #
  #                                                 #
  ###################################################
  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
      # - image: cimg/node:18.7.0
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [backend-build]

      # Your job code here
      - run:
          name: Check Back-end Vulnerabilities
          command: |
            cd backend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force


  ###################################################
  # DEPLOY INFRASTRUCTURE                           #                                                 
  #                                                 #
  #   This will help us deploy our infrastructure   #
  #   for hosting our application                   #
  #                                                 #
  ###################################################
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            cd .circleci/files
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            cd .circleci/files
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            ls -la
            cd .circleci/ansible/
            echo "[web]" > inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory.txt
      #echo "ansible_ssh_common_args='-o StrictHostKeyChecking=no'" > inventory.txt
      #--query 'Reservations[*].Instances[*].PublicIpAddress' \
      
      #- save_cache:
          #paths: [.circleci/ansible]
          #key: frontend-build
      
      - persist_to_workspace:
          root: ./.circleci/ansible
          paths:
            - inventory.txt

      # Here's where you will add some code to rollback on failure      
      - destroy-environment
  

  ###################################################
  # CONFIGURE INFRASTRUCTURE                        #                                                 
  #                                                 #
  #   This will configure the infrastructure to     #
  #   help host our application                     #
  #                                                 #
  ###################################################
  configure-infrastructure:
    docker:
      - image: cimg/base:2022.08
    steps:
      - checkout
      - attach_workspace:
          at: ./.circleci/ansible/
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["86:64:b3:f1:e6:89:fc:e0:81:36:ea:45:15:f8:8c:a3"]
            #- "86:64:b3:f1:e6:89:fc:e0:81:36:ea:45:15:f8:8c:a3"
      # Whatever you want to do
      - run: 
          name: Install Ansible
          command: |
            sudo apt-get update &&
            sudo apt install -y ansible
            which ansible
            ansible --version

      - run:
          name: Display Ansible etc/ansible contents
          command: |
            ls -al /etc/ansible
      
      - run: 
          name: Install AWS CLI
          command: |
            cd $HOME
            sudo apt install -y curl unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run: 
          name: Install NodeJs and NPM
          command: |
            cd $HOME
            sudo apt install -y nodejs npm
            node --version
            npm --version

      - run: 
          name: Host Key Checking
          command: |
            ansible --version
            python3 --version
            echo "[defaults]" > ~/.ansible.cfg
            echo "host_key_checking = False" >> ~/.ansible.cfg
            echo "record_host_keys=False" >> ~/.ansible.cfg

      - run:
          name: List Hosts
          command: |
            cd .circleci/ansible/
            cat inventory.txt
            
      - run:
          name: Run Playbook
          command: |
            ls -la
            cd .circleci/ansible/
            ansible-playbook -i inventory.txt configure-server.yml
      
      - destroy-environment
      
  
  ###################################################
  # RUN MIGRATIONS                                  #                                                 
  #                                                 #
  #   This will setup our database migrations using #
  #   Postgres                                      #
  #                                                 #
  ###################################################
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
      # - image: cimg/node:18.7.0
    steps:
      # Checkout code from git
      - checkout

      - restore_cache:
          keys: [backend-build]
      
      - run:
          name: Environment Variables
          command: |
            cd backend
            echo "NODE_ENV=local" > .env
            echo "VERSION=1" >> .env
            echo "TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> .env
            echo "TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR" >> .env
            echo "TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> .env
            echo "TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS" >> .env
            echo "TYPEORM_HOST=$TYPEORM_HOST" >> .env
            echo "TYPEORM_PORT=$TYPEORM_PORT" >> .env
            echo "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> .env
            echo "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> .env
            echo "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> .env
            cat .env

      - run:
          name: Run Migrations
          command: |
            cd backend
            npm install
            #npm run premigrations
            npm run migrations > migrations_dump.txt

      - run:
          name: Send migration results to kvdb.io
          command: |
            cd backend
            ls -la
            cat migrations_dump.txt
            if grep -q "has been executed successfully." ./migrations_dump.txt
            then
                curl --insecure https://kvdb.io/4hYKp1FLiCJ3uV2tsNAJQZ/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}  -d '1'
            else
                curl --insecure https://kvdb.io/4hYKp1FLiCJ3uV2tsNAJQZ/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
            
            SUCCESS=$(curl --insecure https://kvdb.io/4hYKp1FLiCJ3uV2tsNAJQZ/migration_$\{CIRCLE_WORKFLOW_ID:0:7\})
            
            echo SUCCESS=$SUCCESS

            if SUCCESS==1
            then
              echo ✅ No Pending Migrations
            else
              echo ❌ Pending Migrations
            fi
                  
      # - persist_to_workspace:
      #       root: ./backend
      #       paths:
      #         - .env

      - persist_to_workspace:
            root: .
            paths:
              - backend/*
     # Here's where you will add some code to rollback on failure      
      - destroy-environment

      - revert-migrations


  ###################################################
  # DEPLOY FRONTEND                                 #                                                 
  #                                                 #
  #   This will setup our frontend architecture and #
  #   deploy it to an s3 bucket                     #
  #                                                 #
  ################################################### 
  deploy-frontend:
    docker:
      - image: cimg/base:2022.08
    steps:
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [frontend-build]

      - attach_workspace:
          at: ./backend

      # - attach_workspace:
      #     at: ./frontend
      
      # - run: 
      #     name: Install NodeJs and NPM
      #     command: |
      #       cd $HOME
      #       sudo apt install -y nodejs npm
      #       node --version
      #       npm --version

      
      - run:
          name: Install nvm for Node and NPM
          command: |
            ls -laR ~/
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
            source ~/.profile
            source ~/.bashrc
            nvm install 13.8.0 &&
            nvm use node
            node -v

      # Whatever you want to do
      - run: 
          name: Install Ansible
          command: |
            sudo apt-get update &&
            sudo apt install -y ansible
            which ansible
            ansible --version
    
      - run: 
          name: Install AWS CLI
          command: |
            cd $HOME
            sudo apt install -y curl unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: Get backend url
          command: |
            cd frontend
            ls -la
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" > .env
            cat .env
      
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            source ~/.profile
            source ~/.bashrc
            node -v
            ls -la
            cat .env 
            npm install
            npm run build
            ls -la
            ls -la dist
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      #aws s3 cp dist s3://udapeople-kk1j287dhjp437knk --recursive
      # Here's where you will add some code to rollback on failure      
      - destroy-environment

      - revert-migrations


  ###################################################
  # DEPLOY BACKEND                                  #                                                 
  #                                                 #
  #   This will setup our backend architecture and  #
  #   deploy it to an ec2 instance                  #
  #                                                 #
  ################################################### 
  deploy-backend:
    docker:
      - image: cimg/base:2022.08
    
    steps:
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [backend-build]

      - attach_workspace:
          at: ./.circleci/ansible/
      
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["86:64:b3:f1:e6:89:fc:e0:81:36:ea:45:15:f8:8c:a3"]
           
      - run: 
          name: Install Ansible
          command: |
            sudo apt-get update &&
            sudo apt install -y ansible
            which ansible
            ansible --version

      - run: 
          name: Install AWS CLI
          command: |
            cd $HOME
            sudo apt install -y curl unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: Display Ansible etc/ansible contents
          command: |
            ls -al /etc/ansible

      - run: 
          name: Host Key Checking
          command: |
            ansible --version
            python3 --version
            echo "[defaults]" > ~/.ansible.cfg
            echo "host_key_checking = False" >> ~/.ansible.cfg
            echo "record_host_keys=False" >> ~/.ansible.cfg

      - run: 
          name: Install NodeJs and NPM
          command: |
            sudo apt install -y nodejs npm
            node --version
            npm --version      
      
      - run:
          name: Baking at this point...
          command: |
            ls -la
            cd backend
            npm install
            npm run build
            
      - run:
          name: Zip Backend Directory including node_modules directory for Export
          command: |
            ls
            echo "Improvise to include node_modules folder..."
            echo "ec2 instance takes all day to install..."
            echo "Compressing..."
            tar -zcvf artifact.tar.gz backend
            echo "Compression complete ✅"
            #tar -zcvf artifact.tar.gz --exclude="backend/node_modules" backend
            
      - run:
          name: Export to ansible for operations
          command: |
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            echo "<---------- Checking to see file exists ------------>"
            ls -al .circleci/ansible/roles/deploy/files/
            
      - run:
          name: List Hosts
          command: |
            cd .circleci/ansible/
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt

      - run:
          name: Run Playbook to Deploy Backend
          command: |
            cd .circleci/ansible/
            ansible-playbook -i inventory.txt deploy-backend.yml
        
      #Uncompress
      #tar -xzvf artifact.tar.gz      
      # Here's where you will add some code to rollback on failure  
      - destroy-environment

      - revert-migrations


  ###################################################
  # SMOKE TEST                                      #                                                 
  #                                                 #
  #   This will setup our backend architecture and  #
  #   deploy it to an ec2 instance                  #
  #                                                 #
  ################################################### 
  smoke-test:
    docker:
      # Lightweight Docker image 
      #- image: circleci/node:13.8.0
      - image: cimg/base:2022.08
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Install dependencies
          command: |
            sudo apt install -y curl unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run: 
          name: Install NodeJs and NPM
          command: |
            sudo apt install -y nodejs npm
            node --version
            npm --version      

      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)

            echo $BACKEND_IP
            export API_URL="http://$BACKEND_IP:3030"
            echo ${API_URL}
            if curl -Is "$API_URL/api/status" | grep "OK"
            then
              echo "Backend Test Passed ✅"
              #return 0
            else
              echo "Backend Test Failed ❌"
              #return 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s $URL | grep "Welcome"
            then
              echo "Fronted Test Passed ✅"
              exit 0
            else
              echo "Fronted Test Failed ❌"
              exit 1
            fi
      
      # Here's where you will add some code to rollback on failure  
      - destroy-environment

      - revert-migrations


  ###################################################
  # SYNC TO GREEN BUILD BUCKET                      #                                                 
  #                                                 #
  #   This will sync the contents of the current    #
  #   directory to the s3 bucket given              #
  #                                                 #
  ################################################### 
  sync-to-s3-green-bucket:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      
      # Uncomment the step below if you wish to upload all contents of the current directory to the S3 bucket
      - run: 
          name: Sync to bucket
          command: |
            cd frontend
            aws s3 sync . s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --delete   
      
 
  ###################################################
  # CLOUD FRONT UPDATE                              #                                                 
  #                                                 #
  #   This will destroy all aws instances and all   #
  #   database migrations                           #
  #                                                 #
  ################################################### 
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      # - image: amazon/aws-cli
      - image: cimg/base:2022.08
    steps:
      # Checkout code from git
      - checkout

      - run: 
          name: Install AWS CLI
          command: |
            cd $HOME
            sudo apt install -y curl unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      
      - run: 
          name: Install NodeJs and NPM
          command: |
            cd $HOME
            sudo apt install -y nodejs npm
            node --version
            npm --version

      # - run:
      #     name: Update cloudfront distribution
      #     command: |
      #       aws cloudformation deploy \
      #       --template-file cloudfront.yml \
      #       --stack-name production-distro \
      #       --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
      # - run:
      #     name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
      #     command: |
      #       export OldWorkflowID=$(aws cloudformation \
      #       list-exports --query "Exports[?Name==\`BlueBucketID\`].Value" \
      #       --no-paginate --output text)
            
      #       echo $OldWorkflowID > ~/OldWorkflowID.txt
      #       cat ~/OldWorkflowID.txt
      
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`BlueBucketID\`].Value" \
            --no-paginate --output text)
            
            echo $OldWorkflowID > ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt

            cd .circleci/files
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name udapeople-cloudfront-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

            echo "OldWorkflowID: ${OldWorkflowID}"
            echo "Current Workflow Id: ${CIRCLE_WORKFLOW_ID:0:7}"
          #--parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \

             
      - persist_to_workspace:
          root: ~/
          paths: 
            - OldWorkflowID.txt
            

      # Here's where you will add some code to rollback on failure  
      - destroy-environment

      - revert-migrations


  ###################################################
  # CLEAN UP OLD DEPLOYMENT                         #                                                 
  #                                                 #
  #   Since we are adopting the blue-green strategy #
  #   it would be ideal to delete any unused        #
  #   resources                                     #
  ################################################### 
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout

      - run:
          name: Install Dependencies 
          command: |
            yum install -y tar gzip
      
      - attach_workspace:
          at: ~/
      
      
      # - run:
      #     name: Remove old stacks and files
      #     command: |
      #       # Fetch the stack names          
      #       export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
      #       --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
      #       echo Stack names: "${STACKS[@]}"  
            
      #       if [[ "${STACKS[@]}" =~ "${BlueBucketID}" ]]
      #       then
      #         aws s3 rm "s3://${BlueBucketID}" --recursive
      #         aws cloudformation delete-stack --stack-name "udapeople-s3-blue-${CIRCLE_WORKFLOW_ID:0:7}"
      #       fi

      - run:
          name: Fetch old stack workflow id
          command: |
            
            export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            export STACKS=[udapeople-s3-blue-${CIRCLE_WORKFLOW_ID:0:7}, udapeople-s3-green-${CIRCLE_WORKFLOW_ID:0:7}] #put the list of stacks here

            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"

            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              echo "Delete in Progress..."
              aws s3 rm "s3://${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              echo "Delete Successful ✅"
            
            else
              echo "Delete Not Successful ❌"
            fi
      

  ###################################################
  # DESTROY AND SAVE RESOURCES                      #                                                 
  #                                                 #
  #   This job should be run on a different branch  #
  #   without running any other jobs to delete all  #
  #   aws and database resources                    #
  ###################################################  
  destroy-and-save-resources:
    docker:
      # Docker image here
      # - image: circleci/node:13.8.0
      - image: cimg/base:2022.08
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [backend-build]

      - run: 
          name: Install AWS CLI
          when: on_fail
          command: |
            cd ~/
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            cd aws
            ./install
            aws --version
      
      - run: 
          name: Install NodeJs and NPM
          command: |
            cd $HOME
            sudo apt install -y nodejs npm
            node --version
            npm --version
      
      - run:
          name: Destroy all aws-instances
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-s3-blue-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-s3-green-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      
      - run:
          name: Destroy Migrations
          command: |
            
            SUCCESS=$(curl --insecure https://kvdb.io/4hYKp1FLiCJ3uV2tsNAJQZ/migration_<< parameters.workflow_id >>)
            
            if ((SUCCESS == 1))
            then
              cd backend
              npm install
              npm run migrations:revert
            fi 


###################################################
# WORKFLOWS --> JOBS                              #                                                 
#                                                 #
#   Execute all workflows here.                   #
#   This is a step-by-step process of ensuring    #
#   all tasks in a particular job are executed    #
#   with their requirements.                      #
###################################################  
workflows:
  default:
    jobs:
      # - setup-aws-rds
      - setup-s3-bucket
      - setup-aws-cloudfront:
          requires: [setup-s3-bucket]
      - build-frontend:
          context: slack-env
      - build-backend:
          context: slack-env
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          #filters:
            #branches:
              #only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
            requires: [run-migrations]
      - deploy-backend:
          requires: [deploy-infrastructure, run-migrations, deploy-frontend]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]

      










      # - smoke-test
      # - setup-aws-cloudfront
      # - setup-s3-bucket:
      #     requires: [setup-aws-cloudfront]
      # - run-migrations:
      #     requires: [setup-aws-rds, configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations, setup-s3-bucket]
      # - deploy-frontend










      # # - destroy-aws-infrastructure
      # # - destroy-migrations

      # - deploy-infrastructure
      # - deploy-backend:
      #     requires: [deploy-infrastructure]
      
      
