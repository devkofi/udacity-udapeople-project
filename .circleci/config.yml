version: 2.1

#=============================#
# COMMANDS TO INCLUED IN JOBS #
#=============================#
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
      workflow-id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    #parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=1
            URL="https://blog.udacity.com/"
            if curl -s --head ${URL} 
            then
              return SUCCESS
            else
              SUCCESS=0
              return SUCCESS
            fi

            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm migriations:revert
            fi


#=============================#
# SLACK NOTIFICATION SETUP    #
#=============================#
orbs: 
  slack: circleci/slack@4.10.1

#=============================#
# JOBS TO EXECUTE             #
#=============================#            
jobs:

  ###################################################
  # SETUP CLOUDFRONT DISTRIBUTION                   #                                                 
  #                                                 #
  #   Using the Blue Green Deployment strategy this #
  #   will help us switch from the old infrastruc-  #
  #   ture to the new one                           #
  ###################################################
  setup-cloudfront:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Setup Cloudfront for deployment
          command: |
            cd .circleci/files
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name InitialStack\
              --parameter-overrides WorkflowID=udapeople-kk1j287dhjp437knk


  ###################################################
  # BUILD FRONT END WITH NOTIFICATIONS              #                                                 
  #                                                 #
  #   This will help us setup our front-end and a   #
  #   notification system using Slack               #
  #                                                 #
  ###################################################
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
        
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: pass
          template: success_tagged_deploy_1

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build


  ###################################################
  # BUILD BACK END WITH NOTIFICATIONS               #                                                 
  #                                                 #
  #   This will help us setup our back-end and a    #
  #   notification system using Slack               #
  #                                                 #
  ###################################################
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build

      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
        
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: pass
          template: success_tagged_deploy_1

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  ###################################################
  # TEST FRONT-END                                  #                                                 
  #                                                 #
  #   This will help us test our front-end          #
  #                                                 #
  #                                                 #
  ###################################################
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Test Front-end
          command: |
            cd frontend
            npm run test    

  ###################################################
  # TEST BACK-END                                   #                                                 
  #                                                 #
  #   This will help us test our front-end          #
  #                                                 #
  #                                                 #
  ###################################################
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [backend-build]

      # Your job code here
      - run:
          name: Test Back-end
          command: |
            cd backend
            npm run test

  ###################################################
  # CHECK FOR FRONT END VULNERABILITIES             #                                                 
  #                                                 #
  #   This will scan our front-end application for  #
  #   any vulnerabilities                           #
  #                                                 #
  ###################################################
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [frontend-build]

      # Your job code here
      - run:
          name: Check Front-end Vulnerabilities
          command: |
            cd frontend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
  
  ###################################################
  # CHECK FOR BACK-END VULNERABILITIES              #                                                 
  #                                                 #
  #   This will scan our back-end application for   #
  #   any vulnerabilities                           #
  #                                                 #
  ###################################################
  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [backend-build]

      # Your job code here
      - run:
          name: Check Back-end Vulnerabilities
          command: |
            cd backend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force


  ###################################################
  # DEPLOY INFRASTRUCTURE                           #                                                 
  #                                                 #
  #   This will help us deploy our infrastructure   #
  #   for hosting our application                   #
  #                                                 #
  ###################################################
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            ls -la
            cd .circleci/ansible/
            echo "[web]" > inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory.txt
      #echo "ansible_ssh_common_args='-o StrictHostKeyChecking=no'" > inventory.txt
      #--query 'Reservations[*].Instances[*].PublicIpAddress' \
      
      #- save_cache:
          #paths: [.circleci/ansible]
          #key: frontend-build
      
      - persist_to_workspace:
          root: ./.circleci/ansible
          paths:
            - inventory.txt

      # Here's where you will add some code to rollback on failure      
      - destroy-environment
  

  ###################################################
  # CONFIGURE INFRASTRUCTURE                        #                                                 
  #                                                 #
  #   This will configure the infrastructure to     #
  #   help host our application                     #
  #                                                 #
  ###################################################
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ./.circleci/ansible/
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["86:64:b3:f1:e6:89:fc:e0:81:36:ea:45:15:f8:8c:a3"]
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar
            apk add --update gzip
            apk add --update unzip
            apk add --update curl
      
      - run: 
          name: Host Key Checking
          command: |
            ansible --version
            ls ~/ -la
            if /etc/ansible/ansible.cfg
            then
              echo "============== Viewing /etc/ansible/ansible.cfg ==============="
              cat /etc/ansible/ansible.cfg
              echo "============== Viewing /etc/ansible/ansible.cfg ==============="
            else
              echo "No File Exists"
            fi
            echo "[defaults]" > ~/.ansible.cfg
            echo "host_key_checking = False" >> ~/.ansible.cfg
            if ~/.ansible.cfg
            then
              echo "============== Viewing /etc/ansible/ansible.cfg ==============="
              cat cat ~/.ansible.cfg
              echo "============== Viewing /etc/ansible/ansible.cfg ==============="
            else
              echo ".ansible.cfg does not exist"
            fi

      - run:
          name: Configure server
          command: |
            ls -la
            cd .circleci/ansible/
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure      
      
      - run: 
          name: Install AWS CLI
          when: on_fail
          command: |
            cd ~/
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            aws --version

      - destroy-environment
  
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
     # Here's where you will add some code to rollback on failure      


workflows:
  default:
    jobs:
      - setup-cloudfront
      - build-frontend:
          context: slack-env
      - build-backend:
          context: slack-env
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          #filters:
            #branches:
              #only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]      