version: 2.1

#=============================#
# COMMANDS TO INCLUED IN JOBS #
#=============================#
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
      workflow-id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-s3-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  
  create-to-destroy:
    description: Installs aws to destroy-environment on fail
    parameters:
      # Add parameter here   
      workflow-id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy aws infrastructure
          when: on_fail
          command: |
            cd $HOME
            sudo apt install -y curl unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws cloudformation delete-stack --stack-name udapeople-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-s3-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  
  create-to-revert-migrations:
    description: Revert all database migrations
    steps:
      - run: 
          name: Install NodeJs and NPM
          command: |
            cd $HOME
            sudo apt install -y nodejs npm
            node --version
            npm --version

      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd backend
            npm run premigrations:revert
            npm run migrations:revert
      
  revert-migrations:
    description: Revert the last migration if not successfully run in the current workflow.
    #parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            
            if($SUCCESS==0); 
            then
              cd backend
              npm run premigrations:revert
              npm run migrations:revert
            fi


#=============================#
# SLACK NOTIFICATION SETUP    #
#=============================#
orbs: 
  slack: circleci/slack@4.10.1

#=============================#
# JOBS TO EXECUTE             #
#=============================#            
jobs:

  ###################################################
  # SETUP CLOUDFRONT DISTRIBUTION                   #                                                 
  #                                                 #
  #   Using the Blue Green Deployment strategy this #
  #   will help us switch from the old infrastruc-  #
  #   ture to the new one                           #
  ###################################################
  setup-cloudfront:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Setup Cloudfront for deployment
          command: |
            cd .circleci/files
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name udapeople-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}\
              --parameter-overrides WorkflowID=udapeople-kk1j287dhjp437knk

  ###################################################
  # SETUP S3 BUCKET FOR HOSTING                     #                                                 
  #                                                 #
  #   This will help us set a storage service that  #
  #   that will help us host the content of our     #
  #   application                                   #
  ###################################################
  setup-s3-bucket:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Setup S3 Bucket For Hosting
          command: |
            cd .circleci/files
            aws cloudformation deploy \
              --template-file s3.yml \
              --stack-name "udapeople-s3-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides BucketID="udapeople-kk1j287dhjp437knk-${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople

  ###################################################
  # BUILD FRONT END WITH NOTIFICATIONS              #                                                 
  #                                                 #
  #   This will help us setup our front-end and a   #
  #   notification system using Slack               #
  #                                                 #
  ###################################################
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
        
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: pass
          template: success_tagged_deploy_1

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build


  ###################################################
  # BUILD BACK END WITH NOTIFICATIONS               #                                                 
  #                                                 #
  #   This will help us setup our back-end and a    #
  #   notification system using Slack               #
  #                                                 #
  ###################################################
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build

      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
        
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: pass
          template: success_tagged_deploy_1

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  ###################################################
  # TEST FRONT-END                                  #                                                 
  #                                                 #
  #   This will help us test our front-end          #
  #                                                 #
  #                                                 #
  ###################################################
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Test Front-end
          command: |
            cd frontend
            npm run test    

  ###################################################
  # TEST BACK-END                                   #                                                 
  #                                                 #
  #   This will help us test our front-end          #
  #                                                 #
  #                                                 #
  ###################################################
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [backend-build]

      # Your job code here
      - run:
          name: Test Back-end
          command: |
            cd backend
            npm run test

  ###################################################
  # CHECK FOR FRONT END VULNERABILITIES             #                                                 
  #                                                 #
  #   This will scan our front-end application for  #
  #   any vulnerabilities                           #
  #                                                 #
  ###################################################
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [frontend-build]

      # Your job code here
      - run:
          name: Check Front-end Vulnerabilities
          command: |
            cd frontend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
  
  ###################################################
  # CHECK FOR BACK-END VULNERABILITIES              #                                                 
  #                                                 #
  #   This will scan our back-end application for   #
  #   any vulnerabilities                           #
  #                                                 #
  ###################################################
  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [backend-build]

      # Your job code here
      - run:
          name: Check Back-end Vulnerabilities
          command: |
            cd backend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force


  ###################################################
  # DEPLOY INFRASTRUCTURE                           #                                                 
  #                                                 #
  #   This will help us deploy our infrastructure   #
  #   for hosting our application                   #
  #                                                 #
  ###################################################
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            ls -la
            cd .circleci/ansible/
            echo "[web]" > inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory.txt
      #echo "ansible_ssh_common_args='-o StrictHostKeyChecking=no'" > inventory.txt
      #--query 'Reservations[*].Instances[*].PublicIpAddress' \
      
      #- save_cache:
          #paths: [.circleci/ansible]
          #key: frontend-build
      
      - persist_to_workspace:
          root: ./.circleci/ansible
          paths:
            - inventory.txt

      # Here's where you will add some code to rollback on failure      
      - destroy-environment
  

  ###################################################
  # CONFIGURE INFRASTRUCTURE                        #                                                 
  #                                                 #
  #   This will configure the infrastructure to     #
  #   help host our application                     #
  #                                                 #
  ###################################################
  configure-infrastructure:
    docker:
      - image: cimg/base:2022.08
    steps:
      - checkout
      - attach_workspace:
          at: ./.circleci/ansible/
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["86:64:b3:f1:e6:89:fc:e0:81:36:ea:45:15:f8:8c:a3"]
            #- "86:64:b3:f1:e6:89:fc:e0:81:36:ea:45:15:f8:8c:a3"
      # Whatever you want to do
      - run: 
          name: Install Ansible
          command: |
            sudo apt-get update &&
            sudo apt install -y ansible
            which ansible
            ansible --version

      - run:
          name: Display Ansible etc/ansible contents
          command: |
            ls -al /etc/ansible

      - run: 
          name: Host Key Checking
          command: |
            ansible --version
            python3 --version
            echo "[defaults]" > ~/.ansible.cfg
            echo "host_key_checking = False" >> ~/.ansible.cfg
            echo "record_host_keys=False" >> ~/.ansible.cfg
            
          # ls ~/ -la
          # if /etc/ansible/ansible.cfg
          # then
          #   echo "[defaults]" >> /etc/ansible/ansible.cfg
          #   echo "host_key_checking = False" >> /etc/ansible/ansible.cfg
          #   echo "record_host_keys=False" >> /etc/ansible/ansible.cfg
          #   echo "============== Viewing /etc/ansible/ansible.cfg ==============="
          #   sudo cat /etc/ansible/ansible.cfg
          #   echo "============== Viewing /etc/ansible/ansible.cfg ==============="
          # else
          #   echo "No File Exists"
          #   cd /etc
          #   mkdir ansible
          #   cd ansible
          #   echo "[defaults]" > /etc/ansible/ansible.cfg
          #   echo "host_key_checking = False" >> ansible.cfg
          #   echo "record_host_keys=False" >> ansible.cfg
          # fi
          # echo "[defaults]" > ~/.ansible.cfg
          # echo "host_key_checking = False" >> ~/.ansible.cfg
          # echo "record_host_keys=False" >> ~/.ansible.cfg
          # if ~/.ansible.cfg
          # then
          #   echo "============== Viewing /etc/ansible/ansible.cfg ==============="
          #   sudo cat ~/.ansible.cfg
          #   echo "============== Viewing /etc/ansible/ansible.cfg ==============="
          # else
          #   echo ".ansible.cfg does not exist"
          # fi

            

      - run:
          name: List Hosts
          command: |
            cd .circleci/ansible/
            cat inventory.txt
            
      - run:
          name: Run Playbook
          command: |
            ls -la
            cd .circleci/ansible/
            ansible-playbook -i inventory.txt configure-server.yml
      
      - create-to-destroy
      
      # - run: 
      #     name: Install Ansible
      #     command: |
      #       python3 -m pip install --user ansible
      #       export PATH=$PATH:/.local/bin
      #       source ~/.bash_profile
      #       ansible --version

  
  ###################################################
  # RUN MIGRATIONS                                  #                                                 
  #                                                 #
  #   This will setup our database migrations using #
  #   Postgres                                      #
  #                                                 #
  ###################################################
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
      #- image: cimg/node:18.7.0
    steps:
      # Checkout code from git
      - checkout

      - restore_cache:
          keys: [backend-build]
      
      - run:
          name: Environment Variables
          command: |
            cd backend
            echo "NODE_ENV=local" > .env
            echo "VERSION=1" >> .env
            echo "TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> .env
            echo "TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR" >> .env
            echo "TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> .env
            echo "TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS" >> .env
            echo "TYPEORM_HOST=$TYPEORM_HOST" >> .env
            echo "TYPEORM_PORT=$TYPEORM_PORT" >> .env
            echo "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> .env
            echo "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> .env
            echo "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> .env
            cat .env

      # - run:
      #     name: Update Package
      #     command: |
      #       node --version
      #       cd backend
      #       sudo npm install -g npm-check-updates &&
      #       sudo ncu -u
          # npm install && npm audit fix
      
      # - run:
      #     name: Clean Node Cache
      #     command: |
      #       npm cache clean –force

      # - run:
      #     name: Install Dependencies
      #     command: |
      #       cd backend
      #       ls
      #       npm install
          #npm install && npm audit fix --force

      # - run:
      #     name: Migrations Create
      #     command: |
      #       cd backend
      #       npm run premigrations:create
      #       npm run migrations:create
      
      # - run:
      #     name: Migrations Generate
      #     command: |
      #       cd backend
      #       npm run premigrations:generate
      #       npm run migrations:generate

      - run:
          name: Run Migrations
          command: |
            cd backend
            npm run premigrations
            npm run migrations > migrations_dump.txt
                
      # - run:
      #     name: Run migrations
      #     command: |
      #       ls
      #       cd backend
      #       npm install
      #       npm run migrations > migrations_dump.txt
          
      - run:
          name: Send migration results to kvdb.io
          command: |
            cd backend
            ls -la
            cat migrations_dump.txt
            sudo apt install -y curl
            export ID=$(curl -d "email=${EMAIL_ADDRESS}" https://kvdb.io)   
            # if grep -q "has been executed successfully." ./migrations_dump.txt
            # then
            #     curl --insecure https://kvdb.io/${ID}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            # else
            #     curl --insecure https://kvdb.io/${ID}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            # fi
            if grep -q "has been executed successfully." ./migrations_dump.txt
            then
                curl --insecure https://kvdb.io/YRSzGWJG8T1Fu6GGmGELCa/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
                curl --insecure https://kvdb.io/YRSzGWJG8T1Fu6GGmGELCa/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
            export SUCCESS=$(curl --insecure https://kvdb.io/YRSzGWJG8T1Fu6GGmGELCa/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo SUCCESS=$SUCCESS      
      
      # - run:
      #     name: Intentionally fail
      #     command: |
      #       exit 1

      - persist_to_workspace:
            root: ./backend
            paths:
              - .env
     # Here's where you will add some code to rollback on failure      
      - create-to-destroy

      - revert-migrations

  ###################################################
  # DEPLOY FRONTEND                                 #                                                 
  #                                                 #
  #   This will setup our frontend architecture and #
  #   deploy it to an s3 bucket                     #
  #                                                 #
  ################################################### 
  deploy-frontend:
    docker:
      - image: cimg/base:2022.08
    steps:
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [frontend-build]

      - attach_workspace:
          at: ./backend
      
      # Whatever you want to do
      - run: 
          name: Install Ansible
          command: |
            sudo apt-get update &&
            sudo apt install -y ansible
            which ansible
            ansible --version

      - run:
          name: Display Ansible etc/ansible contents
          command: |
            ls -al /etc/ansible
      
      - run: 
          name: Install AWS CLI
          command: |
            cd $HOME
            sudo apt install -y curl unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run: 
          name: Install NodeJs and NPM
          command: |
            cd $HOME
            sudo apt install -y nodejs npm
            node --version
            npm --version

      - run:
          name: Get backend url
          command: |
            ls -la
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            #aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws s3 cp dist s3://udapeople-kk1j287dhjp437knk --recursive
      # Here's where you will add some code to rollback on failure      
      - destroy-environment

      - revert-migrations

  ###################################################
  # DEPLOY BACKEND                                  #                                                 
  #                                                 #
  #   This will setup our backend architecture and  #
  #   deploy it to an ec2 instance                  #
  #                                                 #
  ################################################### 
  deploy-backend:
    docker:
      - image: cimg/base:2022.08
    steps:
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [frontend-build]

      - attach_workspace:
          at: ./.circleci/ansible/
      
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["86:64:b3:f1:e6:89:fc:e0:81:36:ea:45:15:f8:8c:a3"]
           
      - run: 
          name: Install Ansible
          command: |
            sudo apt-get update &&
            sudo apt install -y ansible
            which ansible
            ansible --version

      - run:
          name: Display Ansible etc/ansible contents
          command: |
            ls -al /etc/ansible

      - run: 
          name: Host Key Checking
          command: |
            ansible --version
            python3 --version
            echo "[defaults]" > ~/.ansible.cfg
            echo "host_key_checking = False" >> ~/.ansible.cfg
            echo "record_host_keys=False" >> ~/.ansible.cfg

      - run: 
          name: Install NodeJs and NPM
          command: |
            sudo apt install -y nodejs npm
            node --version
            npm --version      
      # - run:
      #     name: Deploy backend
      #     command: |
      #       ls -la
      #       cd backend
      #       npm run build
      #       cd ..
      #       # Zip the directory
      #       #tar -C backend -czvf artifact.tar.gz .
      #       tar -zcvf artifact.tar.gz backend
      #       mv artifact.tar.gz .circleci/ansible/roles/deploy/tasks
      #       cd .circleci/ansible
      #       echo "Contents  of the inventory.txt file is -------"
      #       cat inventory.txt
      #       ansible-playbook -i inventory.txt deploy-backend.yml
      
      - run:
          name: Baking at this point...
          command: |
            ls -la
            cd backend
            npm run build
            
      - run:
          name: Zip Backend Directory for Export
          command: |
            ls
            tar -zcvf artifact.tar.gz backend

      - run:
          name: Export to for ansible operations
          command: |
            mv artifact.tar.gz .circleci/ansible/roles/deploy/tasks
            
      - run:
          name: List Hosts
          command: |
            cd .circleci/ansible/
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt

      - run:
          name: Run Playbook to Deploy Backend
          command: |
            ansible-playbook -i inventory.txt deploy-backend.yml
        
      #Uncompress
      #tar -xzvf artifact.tar.gz      
      # Here's where you will add some code to rollback on failure  
      - create-to-destroy

      - create-to-revert-migrations

  destroy-aws-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    
    steps:
      
      - run:
          name: Destroying Infrastructure
          command: |
            aws cloudformation delete-stack --stack-name udapeople-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-s3-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  destroy-migrations:
      docker:
        # Docker image here that supports NodeJS
        - image: circleci/node:13.8.0
        #- image: cimg/node:18.7.0
      steps:
        # Checkout code from git
        - checkout

        - run:
            name: Destroying ORM Infrastructure
            command: |
              cd backend
              npm install
              npm run premigrations:revert
              npm run migrations:revert

workflows:
  default:
    jobs:
      - setup-cloudfront

      - setup-s3-bucket:
          requires: [setup-cloudfront]
      - build-frontend:
          context: slack-env
      - build-backend:
          context: slack-env
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          #filters:
            #branches:
              #only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations, setup-s3-bucket]
      - deploy-backend:
          requires: [run-migrations]

      # - destroy-aws-infrastructure

      # - destroy-migrations
      
      
